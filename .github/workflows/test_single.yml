name: Build and run a single test

on:
  workflow_dispatch:
    inputs:
      test:
        required: true
        type: string
      debug_cosmo:
        required: false
        type: boolean
      debug_native:
        required: false
        type: boolean
  workflow_call:
    inputs:
      test:
        required: true
        type: string

jobs:
  build_exe:
    name: ${{ inputs.test }} [cosmo]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Load cosmocc version
        run: |
          version=$(cat .github/cosmocc_version.txt)
          echo "cosmocc_version=${version}" >> "$GITHUB_ENV"

      - name: Setup cosmocc
        uses: bjia56/setup-cosmocc@v0.0.4
        with:
          version: ${{ env.cosmocc_version }}

      - name: Build exe ${{ inputs.test }}
        run: |
          cd tests/${{ inputs.test }}
          CC=cosmocc CXX=cosmoc++ cmake -B build -DBUILD_EXE=ON
          cmake --build build --parallel 4

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.test }}-exe
          path: tests/${{ inputs.test }}/build/cosmo.com

      - name: Interactive debugging
        uses: fawazahmed0/action-debug-vscode@v3
        if: ${{ always() && inputs.debug_cosmo }}

  build_test_native:
    name: ${{ inputs.test }} [${{ matrix.os }} ${{ matrix.arch }}]
    needs: build_exe
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - runner: macos-13
            arch: x86_64
            os: MacOS
          - runner: macos-14
            arch: arm64
            os: MacOS
          - runner: ubuntu-latest
            arch: x86_64
            os: Linux
          - runner: windows-latest
            arch: x86_64
            os: Windows
          - runner: ubuntu-latest
            arch: x86_64
            os: FreeBSD
          - runner: ubuntu-latest
            arch: aarch64
            os: FreeBSD
          - runner: ubuntu-latest
            arch: x86_64
            os: NetBSD

    steps:
      - name: Set up cosmocc
        if: ${{ matrix.os == 'Linux' }}
        uses: bjia56/setup-cosmocc@v0.0.4

      - name: Setup cmake
        if: ${{ !contains(matrix.os, 'BSD') }}
        uses: jwlawson/actions-setup-cmake@v2.0.2
        with:
          cmake-version: 3.31.3

      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.test }}-exe
          path: .

      - name: Mark executable
        shell: bash
        run: |
          chmod +x cosmo.com

      - name: Build native and test
        if: ${{ !contains(matrix.os, 'BSD') }}
        shell: bash
        run: |
          cd tests/${{ inputs.test }}
          if [[ "${{ matrix.os}}" == "MacOS" && "${{ matrix.arch }}" == "x86_64" ]]; then
            cmake -B build -DBUILD_EXE=ON -DBINARY_NAME=native
          else
            cmake -B build
          fi
          cmake --build build --parallel 4

          cp ../../cosmo.com .
          if [[ "${{ matrix.os }}" == "Windows" ]]; then
            time ./cosmo.com build/Debug/native.dll
          elif [[ "${{ matrix.os }}" == "MacOS" && "${{ matrix.arch }}" == "x86_64" ]]; then
            time ./cosmo.com build/native
          else
            time ./cosmo.com build/libnative.so
          fi

      - name: Start VM
        if: ${{ matrix.os == 'FreeBSD' }}
        uses: vmactions/freebsd-vm@v1
        with:
          sync: nfs
          arch: ${{ matrix.arch }}
          prepare: |
            pkg install -y cmake

      - name: Start VM
        if: ${{ matrix.os == 'NetBSD' }}
        uses: vmactions/netbsd-vm@v1
        with:
          sync: nfs
          prepare: |
            /usr/sbin/pkg_add cmake clang

      - name: Build native and test
        if: ${{ matrix.os == 'FreeBSD' }}
        shell: freebsd {0}
        run: |
          cd ${{ github.workspace }}/tests/${{ inputs.test }}
          cmake -B build
          cmake --build build --parallel 4

          cp ../../cosmo.com .
          ./cosmo.com build/libnative.so

      - name: Build native and test
        if: ${{ matrix.os == 'NetBSD' }}
        shell: netbsd {0}
        run: |
          cd ${{ github.workspace }}/tests/${{ inputs.test }}
          CC=clang CXX=clang++ cmake -B build -DBUILD_EXE=ON -DBINARY_NAME=native
          cmake --build build --parallel 4

          cp ../../cosmo.com .
          ./cosmo.com build/native

      - name: Interactive debugging
        uses: fawazahmed0/action-debug-vscode@v3
        if: ${{ always() && inputs.debug_native }}
